---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Description: 'Publish AWS Health CloudWatch Events to Chime. See https://github.com/robertmaldon/aws-health-tools/tree/master/chime-notifier.'
  InvestigationEventsHookURL:
    Type: String
    Description: 'Please enter the web hook url from Chime for investigation events:'
    NoEcho: true
  OtherEventsHookURL:
    Type: String
    Description: 'Please enter the web hook url from Chime for other categories of events:'
    NoEcho: true
  EventURL:
    Type: String
    Description: '(Optional) Please enter the url for a dashboard (such as PHD) that can display information for an event:'
    Default: 'https://phd.aws.amazon.com/phd/home?region={region}#/event-log?eventID={eventArn}&eventTab=details&layout=vertical'
  AccountURL:
    Type: String
    Description: '(Optional) Please enter the url for a dashboard that can display information for an account:'
    Default: ''
Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  LambdaRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Stmt12349896368829
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
      Roles:
      - Ref: LambdaFunctionRole
  ChimeNotifierLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaFunctionRole
        - Arn
      Environment:
        Variables:
          CHIMEWEBHOOKINVESTIGATIONEVENTS : !Ref InvestigationEventsHookURL
          CHIMEWEBHOOKOTHEREVENTS : !Ref OtherEventsHookURL
          EVENTURL: !Ref EventURL
          ACCOUNTURL: !Ref AccountURL
      Code:
        ZipFile: !Sub |
          # Sample Lambda Function to post notifications to a Chime room when an AWS Health event happens
          from __future__ import print_function
          import json
          import logging
          import os
          from urllib.request import Request, urlopen
          from urllib.error import URLError, HTTPError

          # Setting up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # helper functions

          # although markdown has a number of special chars (\\`*_{}[]()#+-.!) the chime
          # android app seems to have a problem with just underscores (the desktop app
          # doesn't), so we put anything contaning underscores into a markdown code block
          def escape_markdown_special_chars(s):
              if type(s) is list:
                  l = []
                  for i in s:
                      l.append(escape_markdown_special_chars(i))
                  return l
              elif s is not None:
                  if s.count('_') > 0:
                      return '`{}`'.format(s)
                  else:
                      return s
              else:
                  return None

          def val(d, key):
              if key in d:
                  return d[key]
              else:
                  return None

          # create a url from a cloudformation parameter, if it was specified (not blank)
          def optional_url(env_var_url, data):
              if env_var_url in os.environ and os.environ[env_var_url]:
                  raw_url = os.environ[env_var_url]
                  return raw_url.format(**data)
              else:
                  return None

          # main function
          def lambda_handler(event, context):
              detail = event['detail']
              d = {
                  'account': val(event, 'account'),
                  'description': detail['eventDescription'][0]['latestDescription'],
                  'endTime': val(detail, 'endTime'),
                  'eventArn': val(detail, 'eventArn'),
                  'eventTypeCategory': val(detail, 'eventTypeCategory'),
                  'eventTypeCode': val(detail, 'eventTypeCode'),
                  'resources': val(event, 'resources'),
                  'region': val(event, 'region'),
                  'service': val(detail, 'service'),
                  'startTime': val(detail, 'startTime')
              }
              # use raw values to construct optional urls 
              event_arn_url = optional_url('EVENTURL', d)
              account_url = optional_url('ACCOUNTURL', d)
              # escape raw values before constructing the markdown message
              #for k in d:
              #    d[k] = escape_markdown_special_chars(d[k])
              # add urls
              if event_arn_url:
                  d['eventArnUrl'] = '[{}]({})'.format(d['eventArn'], event_arn_url)
              else:
                  d['eventArnUrl'] = '{}'.format(d['eventArn'])
              if account_url:
                  d['accountUrl'] = '[{}]({})'.format(d['account'], account_url)
              else:
                  d['accountUrl'] = '{}'.format(d['account'])
              # construct the message
              message = '''/md
          {description}
          * ARN: {eventArnUrl}
          * Account: {accountUrl}
          * Region: {region}
          * Service: {service}
          * Event type code: `{eventTypeCode}`
          * Event type category: {eventTypeCategory}
          * Start time: {startTime}
          * End time: {endTime}
          * Resources: {resources}
              '''.format(**d)
              chime_message = {'Content': message}
              logger.info(str(chime_message))
              if detail['eventTypeCategory'] == 'investigation':
                  webhookurl = str(os.environ['CHIMEWEBHOOKINVESTIGATIONEVENTS'])
              else:
                  webhookurl = str(os.environ['CHIMEWEBHOOKOTHEREVENTS'])
              req = Request(webhookurl, data=json.dumps(chime_message).encode('utf-8'), headers={'Content-Type': 'application/json'})
              try:
                  response = urlopen(req)
                  response.read()
              except HTTPError as e:
                  logger.error('Request failed : %d %s', e.code, e.reason)
              except URLError as e:
                  logger.error('Server connection failed: %s', e.reason)
      Runtime: python3.7
      Timeout: '60'
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ChimeNotifierLambdaFn
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - CloudWatchEventRule
        - Arn
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
        - aws.health
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - ChimeNotifierLambdaFn
          - Arn
        Id: ChimeNotifierLambdaFn
